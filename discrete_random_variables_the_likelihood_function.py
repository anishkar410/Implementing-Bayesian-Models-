# -*- coding: utf-8 -*-
"""Discrete random variables_The likelihood function

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-GsMLe1DxJNdlmZQE4-vUnlcnLRAKJk9
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import poisson

# Define the parameter λ
λ = 10

# Define the range of k values
k_values = np.arange(0, 51)

# Calculate the Poisson PMF
pmf = poisson.pmf(k_values, λ)

# Create the scatter plot
plt.scatter(k_values, pmf)

# Add title and labels
plt.title('Poisson PMF for λ = 10')
plt.xlabel('Number of Road Accidents')
plt.ylabel('Probability')

# Customize the x-axis ticks
plt.xticks(np.arange(0, 51, step=5))

# Add gridlines
plt.grid(axis='y', linestyle='--', alpha=0.1)

# Show the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt

def likelihood_function(mu, x):
    # Compute the likelihood for a log-normal distribution
    return np.exp(-((np.log(x) - mu) ** 2) / 2) / (x * np.sqrt(2 * np.pi))

x = 220
mu_values = np.linspace(0, 10, 100)
likelihood_values = likelihood_function(mu_values, x)

plt.plot(mu_values, likelihood_values)
plt.title('Likelihood Function with X = 220')
plt.xlabel('μ')
plt.ylabel('f(x, μ)')
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = np.array([303.25, 443, 220, 560, 880])

def likelihood(mu):
    # Compute the likelihood for a log-normal distribution
    p = np.exp(-np.sum((np.log(x) - mu) ** 2) / 2) / (np.prod(x) * (np.sqrt(2 * np.pi) ** len(x)))
    return p

mu_values = np.linspace(0, 10, 1000)
likelihoods = [likelihood(mu) for mu in mu_values]

plt.plot(mu_values, likelihoods)
plt.title('Likelihood Function')
plt.xlabel('Mean (μ)')
plt.ylabel('Likelihood')
plt.grid(True)
plt.show()